/*******************************************************************************
 * Copyright (c) 2000, 2008 INRIA.
 * 
 *    This file is part of SmartTools project
 *    <a href="http://www-sop.inria.fr/smartool/">SmartTools</a>
 * 
 *     SmartTools is free software; you can redistribute it and/or modify
 *     it under the terms of the GNU Lesser General Public License as published
 *     by the Free Software Foundation; either version 2 of the License, or
 *     (at your option) any later version.
 * 
 *     SmartTools is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Lesser General Public License for more details.
 * 
 *     You should have received a copy of the GNU Lesser General Public License
 *     along with SmartTools; if not, write to the Free Software
 *     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 *     INRIA
 * 
 *******************************************************************************/
// $Id: MessageImpl.java 2827 2009-04-21 09:08:51Z bboussema $
package inria.smarttools.core.component;

/**
 * Description of a SmartTools Message.<br>
 * Mandatory Data:
 * <ul>
 * <li>name
 * <li>attributes (depends of Message Definition)
 * <li>expeditor
 * </ul>
 * Extra data:
 * <ul>
 * <li>data
 * </ul>
 * 
 * @author <a href="mailto:Didier.Parigot@sophia.inria.fr">Didier Parigot</a>
 * @version $Revision: 2827 $
 */
public class MessageImpl implements Message {

	private static final long serialVersionUID = 1L;

	protected String adresseeId;

	protected String adresseeType;

	protected PropertyMap attributesForMessage = new PropertyMap();

	protected PropertyMap attributesForRecipient = new PropertyMap();

	protected String expeditorId;

	protected String expeditorType;

	private transient ContainerProxy expeditor;

	protected String name;

	protected transient boolean sended = false;

	public MessageImpl() {

	}

	public MessageImpl(final String name,
			final PropertyMap attributesForMessage,
			final PropertyMap attributesForRecipient) {
		setName(name);
		setAttributesForRecipient(attributesForRecipient);
		setAttributesForMessage(attributesForMessage);
	}

	public MessageImpl(final String name,
			final PropertyMap attributesForMessage,
			final PropertyMap attributesForRecipient, final String adressee) {
		this(name, attributesForMessage, attributesForRecipient);
		setAdresseeId(adressee);
	}

	public String getAdresseeId() {
		return adresseeId;
	}

	public String getAdresseeType() {
		return adresseeType;
	}

	public PropertyMap getAttributesForMessage() {
		return attributesForMessage;
	}

	public PropertyMap getAttributesForRecipient() {
		return attributesForRecipient;
	}

	public ContainerProxy getExpeditor() {
		return expeditor;
	}

	public String getExpeditorId() {
		return expeditorId;
	}

	public String getExpeditorType() {
		return expeditorType;
	}

	public String getName() {
		return name;
	}

	public boolean isSended() {
		return sended;
	}

	public void setAdressee(final ContainerProxy a) {
		if (a != null) {
			if (a.getIdName() != null) {
				adresseeId = a.getIdName();
			}
			if (a.getContainerDescription().getComponentName() != null) {
				adresseeType = a.getContainerDescription().getComponentName();
			}
		}
	}

	public void setAdresseeId(final String adresseeId) {
		if (adresseeId != null) {
			this.adresseeId = adresseeId;
		}
	}

	public void setAdresseeType(final String adresseeType) {
		if (adresseeType != null) {
			this.adresseeType = adresseeType;
		}
	}

	public void setAttributesForMessage(final PropertyMap attributesForMessage) {
		if (attributesForMessage != null) {
			this.attributesForMessage = attributesForMessage;
		}
	}

	public void setAttributesForRecipient(
			final PropertyMap attributesForRecipient) {
		if (attributesForRecipient != null) {
			this.attributesForRecipient = attributesForRecipient;
		}
	}

	public void setExpeditor(final ContainerProxy v) {
		if (v != null) {
			expeditorId = v.getIdName();
			if (expeditorId.startsWith("ComponentsManager")) {
				expeditorType = expeditorId;
			} else {
				expeditorType = v.getContainerDescription().getComponentName();
			}
			expeditor = v;
		}
	}

	public void setName(final String name) {
		if (name != null) {
			this.name = name;
		}
	}

	public void setSended(final boolean v) {
		sended = v;
	}

	@Override
	public String toString() {
		return name + " " + attributesForRecipient + " " + attributesForMessage;
	}
}
